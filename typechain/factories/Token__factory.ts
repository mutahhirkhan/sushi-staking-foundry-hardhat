/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Token, TokenInterface } from "../Token";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040518060400160405280600581526020017f544f4b454e0000000000000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f544f4b3100000000000000000000000000000000000000000000000000000000815250816003908051906020019062000096929190620000ef565b508060049080519060200190620000af929190620000ef565b505050620000e67f55af5f5c1ba9e0d2ccb7c8307ffd114a54c404588917e4b274102411dcd87ee860001b620000ec60201b60201c565b62000203565b50565b828054620000fd90620001ce565b90600052602060002090601f0160209004810192826200012157600085556200016d565b82601f106200013c57805160ff19168380011785556200016d565b828001600101855582156200016d579182015b828111156200016c5782518255916020019190600101906200014f565b5b5090506200017c919062000180565b5090565b5b808211156200019b57600081600090555060010162000181565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620001e757607f821691505b602082108103620001fd57620001fc6200019f565b5b50919050565b6118e180620002136000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806340c10f191161008c5780639dc29fac116100665780639dc29fac14610228578063a457c2d714610244578063a9059cbb14610274578063dd62ed3e146102a4576100cf565b806340c10f19146101be57806370a08231146101da57806395d89b411461020a576100cf565b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461012257806323b872dd14610140578063313ce56714610170578063395093511461018e575b600080fd5b6100dc6102d4565b6040516100e99190610fd8565b60405180910390f35b61010c60048036038101906101079190611093565b610366565b60405161011991906110ee565b60405180910390f35b61012a610389565b6040516101379190611118565b60405180910390f35b61015a60048036038101906101559190611133565b610393565b60405161016791906110ee565b60405180910390f35b6101786103c2565b60405161018591906111a2565b60405180910390f35b6101a860048036038101906101a39190611093565b6103cb565b6040516101b591906110ee565b60405180910390f35b6101d860048036038101906101d39190611093565b610402565b005b6101f460048036038101906101ef91906111bd565b610494565b6040516102019190611118565b60405180910390f35b6102126104dc565b60405161021f9190610fd8565b60405180910390f35b610242600480360381019061023d9190611093565b61056e565b005b61025e60048036038101906102599190611093565b610600565b60405161026b91906110ee565b60405180910390f35b61028e60048036038101906102899190611093565b610677565b60405161029b91906110ee565b60405180910390f35b6102be60048036038101906102b991906111ea565b61069a565b6040516102cb9190611118565b60405180910390f35b6060600380546102e390611259565b80601f016020809104026020016040519081016040528092919081815260200182805461030f90611259565b801561035c5780601f106103315761010080835404028352916020019161035c565b820191906000526020600020905b81548152906001019060200180831161033f57829003601f168201915b5050505050905090565b600080610371610721565b905061037e818585610729565b600191505092915050565b6000600254905090565b60008061039e610721565b90506103ab8582856108f2565b6103b685858561097e565b60019150509392505050565b60006012905090565b6000806103d6610721565b90506103f78185856103e8858961069a565b6103f291906112b9565b610729565b600191505092915050565b61042e7fbd126f4a9344c6c652368f306921796124244d62a73c8e3e5fa0cbe88a193f0b60001b610bfd565b61045a7f16db5a11e22638a1fd5f73faade3061f9d0b5321163816ef148c0943f289830660001b610bfd565b6104867f05774f029e170f9b9b4978cc3233f1d7365bad25601b619d95414ef200abbc7960001b610bfd565b6104908282610c00565b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600480546104eb90611259565b80601f016020809104026020016040519081016040528092919081815260200182805461051790611259565b80156105645780601f1061053957610100808354040283529160200191610564565b820191906000526020600020905b81548152906001019060200180831161054757829003601f168201915b5050505050905090565b61059a7fe7138e672dd10169f6f0943e745ae6de1fd8a40718e19da6729855b076a1ae8060001b610bfd565b6105c67f39d558eb4c5711484cfa3192d7976c3db8770ee50fea19678835666a6d23d00860001b610bfd565b6105f27ff1e4553c8e1898436e0151f442a6e3b0ba55d478c8a6c62907ccbb9390cbaf1d60001b610bfd565b6105fc8282610d5f565b5050565b60008061060b610721565b90506000610619828661069a565b90508381101561065e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065590611381565b60405180910390fd5b61066b8286868403610729565b60019250505092915050565b600080610682610721565b905061068f81858561097e565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610798576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078f90611413565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610807576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fe906114a5565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516108e59190611118565b60405180910390a3505050565b60006108fe848461069a565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610978578181101561096a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096190611511565b60405180910390fd5b6109778484848403610729565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036109ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e4906115a3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5390611635565b60405180910390fd5b610a67838383610f35565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610aed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae4906116c7565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b8091906112b9565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610be49190611118565b60405180910390a3610bf7848484610f3a565b50505050565b50565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6690611733565b60405180910390fd5b610c7b60008383610f35565b8060026000828254610c8d91906112b9565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610ce291906112b9565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610d479190611118565b60405180910390a3610d5b60008383610f3a565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610dce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc5906117c5565b60405180910390fd5b610dda82600083610f35565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610e60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5790611857565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160026000828254610eb79190611877565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610f1c9190611118565b60405180910390a3610f3083600084610f3a565b505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610f79578082015181840152602081019050610f5e565b83811115610f88576000848401525b50505050565b6000601f19601f8301169050919050565b6000610faa82610f3f565b610fb48185610f4a565b9350610fc4818560208601610f5b565b610fcd81610f8e565b840191505092915050565b60006020820190508181036000830152610ff28184610f9f565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061102a82610fff565b9050919050565b61103a8161101f565b811461104557600080fd5b50565b60008135905061105781611031565b92915050565b6000819050919050565b6110708161105d565b811461107b57600080fd5b50565b60008135905061108d81611067565b92915050565b600080604083850312156110aa576110a9610ffa565b5b60006110b885828601611048565b92505060206110c98582860161107e565b9150509250929050565b60008115159050919050565b6110e8816110d3565b82525050565b600060208201905061110360008301846110df565b92915050565b6111128161105d565b82525050565b600060208201905061112d6000830184611109565b92915050565b60008060006060848603121561114c5761114b610ffa565b5b600061115a86828701611048565b935050602061116b86828701611048565b925050604061117c8682870161107e565b9150509250925092565b600060ff82169050919050565b61119c81611186565b82525050565b60006020820190506111b76000830184611193565b92915050565b6000602082840312156111d3576111d2610ffa565b5b60006111e184828501611048565b91505092915050565b6000806040838503121561120157611200610ffa565b5b600061120f85828601611048565b925050602061122085828601611048565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061127157607f821691505b6020821081036112845761128361122a565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006112c48261105d565b91506112cf8361105d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156113045761130361128a565b5b828201905092915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b600061136b602583610f4a565b91506113768261130f565b604082019050919050565b6000602082019050818103600083015261139a8161135e565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006113fd602483610f4a565b9150611408826113a1565b604082019050919050565b6000602082019050818103600083015261142c816113f0565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b600061148f602283610f4a565b915061149a82611433565b604082019050919050565b600060208201905081810360008301526114be81611482565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b60006114fb601d83610f4a565b9150611506826114c5565b602082019050919050565b6000602082019050818103600083015261152a816114ee565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061158d602583610f4a565b915061159882611531565b604082019050919050565b600060208201905081810360008301526115bc81611580565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b600061161f602383610f4a565b915061162a826115c3565b604082019050919050565b6000602082019050818103600083015261164e81611612565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006116b1602683610f4a565b91506116bc82611655565b604082019050919050565b600060208201905081810360008301526116e0816116a4565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b600061171d601f83610f4a565b9150611728826116e7565b602082019050919050565b6000602082019050818103600083015261174c81611710565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006117af602183610f4a565b91506117ba82611753565b604082019050919050565b600060208201905081810360008301526117de816117a2565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000611841602283610f4a565b915061184c826117e5565b604082019050919050565b6000602082019050818103600083015261187081611834565b9050919050565b60006118828261105d565b915061188d8361105d565b9250828210156118a05761189f61128a565b5b82820390509291505056fea2646970667358221220a8c28ce74efcc6f002118b94f823aeb1f8b7d60c85eb371694fa9ac2a5d8ad8c64736f6c634300080d0033";

export class Token__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Token> {
    return super.deploy(overrides || {}) as Promise<Token>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Token {
    return super.attach(address) as Token;
  }
  connect(signer: Signer): Token__factory {
    return super.connect(signer) as Token__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenInterface {
    return new utils.Interface(_abi) as TokenInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Token {
    return new Contract(address, _abi, signerOrProvider) as Token;
  }
}
